name: Production

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/modprobe/inex

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: build
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .

          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs:
      - build
    concurrency:
      group: deploy-production
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-kubectl@v4
      - uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      - name: Deploy
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: |-
            helm upgrade production ./chart \
              --install \
              --wait \
              --atomic \
              --namespace=${{ vars.NAMESPACE }} \
              --create-namespace \
              --set replicaCount=${{ vars.REPLICAS }} \
              --set-string app.version=${{ github.sha }} \
              --set-string app.host=${{ vars.HOSTNAME }} \
              --set-string app.bot.path=${{ vars.BOT_PATH }} \
              --set-string app.bot.token=${{ secrets.BOT_TOKEN }} \
              --set-string image.repository=${{ env.IMAGE }} \
              --set-string image.tag=${{ github.sha }} \
              --set-json imagePullSecrets='[{"name": "${{ vars.IMAGE_PULL_SECRET_NAME }}" }]' \
              --set-json ingress.hosts='[{ "host": "${{ vars.HOSTNAME }}", "paths": [{ "path": "/", "pathType": "ImplementationSpecific" }] }]' \
              --set-json ingress.tls='[{ "secretName": "inex-prod-cert", "hosts": ["${{ vars.HOSTNAME }}"]}]' \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt-prod \
              --set-string resources.requests.cpu=100m,resources.requests.memory=128Mi \
              --set-string resources.limits.cpu=150m,resources.limits.memory=192Mi \
              --set telemetry.enabled=true \
              --set-string telemetry.envVars.OTEL_METRICS_EXPORTER=prometheus \
              --set-string telemetry.envVars.OTEL_EXPORTER_PROMETHEUS_HOST="0.0.0.0" \
              --set-string telemetry.envVars.OTEL_TRACES_EXPORTER=otlp \
              --set-string telemetry.envVars.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT="${{ vars.ALLOY_OTLP_ENDPOINT }}/v1/traces" \
              --set-string telemetry.envVars.OTEL_LOGS_EXPORTER=otlp \
              --set-string telemetry.envVars.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT="${{ vars.ALLOY_OTLP_ENDPOINT }}/v1/logs" \
              --set-string telemetry.envVars.OTEL_RESOURCE_ATTRIBUTES="deployment.environment=production"
            
